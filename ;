import _ from "lodash";
import faker from "faker";
import React, { Component, useState } from "react";
import { Search, Grid, Header, Segment } from "semantic-ui-react";

const initialState = { isLoading: false, results: [], value: "" };

const getResults = () =>
    _.times(5, () => ({
        title: faker.company.companyName(),
        description: faker.company.catchPhrase(),
        image: faker.internet.avatar(),
        price: faker.finance.amount(0, 100, 2, "$"),
    }));

const source = _.range(0, 3).reduce((memo) => {
    const name = faker.hacker.noun();
    console.log(name);

    // eslint-disable-next-line no-param-reassign
    memo[name] = {
        name,
        results: getResults(),
    };

    return memo;
}, {});

function SearchBar() {
    const [{ isLoading, results, value }, setState] = useState(initialState);

    const clearState = () => {
        setState({ ...initialState });
        return initialState;
    };

    handleResultSelect = (e, { result }) => {
        setState((prevState) => ({ ...prevState, [results]: result }));
    };

    handleSearchChange = (e, { value }) => {
        setIsLoading(true);
        setValue(value);
        setState((prevState) => ({
            ...prevState,
            isLoading: true,
            value: value,
        }));

        setTimeout(() => {
            if (value.length < 1) return clearState();

            const re = new RegExp(_.escapeRegExp(value), "i");
            const isMatch = (result) => re.test(result.title);

            const filteredResults = _.reduce(
                source,
                (memo, data, name) => {
                    const results = _.filter(data.results, isMatch);
                    if (results.length) memo[name] = { name, results }; // eslint-disable-line no-param-reassign

                    return memo;
                },
                {}
            );

            setState((prevState) => ({
                ...prevState,
                isLoading: false,
                [results]: filteredResults,
            }));
        }, 300);
    };

    return (
        <Search
            category
            loading={isLoading}
            onSearchChange={_.debounce(handleSearchChange, 500, {
                leading: true,
            })}
            results={results}
            value={value}
        />
    );
}

export default SearchBar;
